LS Flow
---
1. incoming request
2. security checks (authentication) and request body decryption - done by ls auth filter
3. request validation - format, amount etc - request validation is done per transcode
4. generate mac, switch reference
security checks - check digit, account status(if blocked), cms checks
5. txn logging for funds mvt requests. no logging for balance,statement etc - txn, txn_detail
6. route request - request data to route, format and security, see ecarddb.e_tmcnode;, (see efrontend ecarddb.interface table columns (active,allow_web), see ecarddb.e_tmckey for key exchange
7. call cms webservice(if it applies) - this is determined from route property of issuer code
8. txn update
9. Add merchant data to request ( does not apply. caller does that. ls receives its request with merchant data populated)

8. save response (00 success, 31 failed, 06 failed)



detail
incoming request
security checks (authentication) and request body decryption - done by ls auth filter 
log request - done in filter
generate switch reference
log prefix
get node, route, transcode
  check node, route, transcode are active
  check if node kxstate status is enabled, true
call TranscodeImpl.process  
		log transaction 
		call cms webservice(if it applies)
		route request		

microservices flow
-----
1. request from api gateway
2. retrieve merchant data (merchant code, bankcode, accountId and add to the header/body)
3. call fee service if it applies and set the fee
4. validate request ie check params if request is correct
5. if Elevy applies, confirm the elevy amount using the reference passed. same reference was used by merchant to get the elevy
6. Generate LS request, encrypt data
7. LS calls requires authorisation ie set auth header in request
8. call LS


gen mac, 
gen switch ref - in app or from table (sequential)
call cms logic to use
LS Error codes determination, error codes table(caching and crud/refresh)
LS response json
records logging: do we log once(one insert) or we update after logging - brain storming

routing module brain storming
key exchange

circuit breaker : intelligence when node is failing consecutively or is down


TODO
LS Processor/Client/Exchange Demo class
momo engine logic,implementation. ls shd be able to process w2b internally without relying on momo engine like service
reversal logic/implementation 
   see ecardb.e_reversal table
   method markReversed(reference) = updates columns to reversal status. 
reprocessing
how does ls updates it data eg, the data loaded into cache like transcodes etc

prerequisite models
-------------
transcode table
bank codes
node
route table
transaction request
transaction response
error codes


what is the security on routing?
  key exchange and data encryption, can we do mac on txn posted
  ip whitelisting? NO
  

LS Start
--
 1.  Tables to load to memory/cache
		1. load node, routes to memory/cache - active routes. auto refresh will reload routes activated or new routes added 
			methods - load routes, load route
	    2. transcode
		3. banks code table
		4. error codes
		
		note: crud apis, auto refresh for all
		
2. start key exchange, health check - check file LS Key exchange
3. LS flow - check file LS development

if request comes u check if the route kx is complete     

request parameters validation flow
      //if isTransaction
         //we check for all required parameters
            //  eg debit account, amount, description etc
         //if isduplex
            //we check credit account info
      //else not transaction eg BE, MS
        //for these once we classify them as accountQuery
           // if(accountquery) we check if sourceaccount info is provided

TranscodeImpl 
---
We use the transcode info to form the process flow for the transaction. whether is financial, is duplex, single etc.
It also guide us to do request validation

1. request parameters validation ie checking amount, source code etc is present in the request



Setting Merchant Code
--
Every financial transaction shd have both debit and credit details. This means for txns with credit details missing we have to still populate them.
we have to fetch the destination account/merchant code from b2b_merchant table. Transcodes that requires debit but no credit fall under this

2. 